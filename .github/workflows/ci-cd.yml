name: CI/CD Pipeline

on:
  push:
    branches: [dev, uat, staging, preprod, main]
  pull_request:
    branches: [dev, uat, staging, preprod, main]

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '10'

#NETLIFY_AUTH_TOKEN=nfp_UpqYfGVRBuut3bWsAyM5GC7b74QoumuW8f27
#NETLIFY_SITE_ID=fc3d2a93-215f-4cbb-9300-6153df63fd44
#SNYK_TOKEN=25445256-0ec5-4ef7-b28e-4af618d9a2ee

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

  lint:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Install dependencies
        run: pnpm install
      - name: Run lint
        run: pnpm run lint

  security-check:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Install dependencies
        run: pnpm install
      - name: Run security audit
        run: pnpm audit

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      - name: Install Grype
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin
  
      - name: Run Grype scan
        run: |
          grype dir:. --fail-on high --config .grype.yaml

  unit-test:
    needs: [lint, security-check]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Install dependencies
        run: pnpm install
      - name: Run tests
        run: pnpm test-all

  build:
    needs: [unit-test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Install dependencies
        run: pnpm install
      - name: Build
        run: pnpm build-all
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: |
            **/dist
            **/build
            **/.next

  e2e-test:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Install dependencies
        run: pnpm install
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-output
      - name: Run E2E tests
        run: pnpm test:e2e

  deploy:
    needs: [e2e-test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-output

      - name: Deploy to Netlify
        run: |
          DEPLOY_URL=""
          DEPLOY_ALIAS=""

          case ${GITHUB_REF#refs/heads/} in
            "dev")
              DEPLOY_ALIAS="dev"
              ;;
            "uat")
              DEPLOY_ALIAS="uat"
              ;;
            "staging")
              DEPLOY_ALIAS="staging"
              ;;
            "preprod")
              DEPLOY_ALIAS="preprod"
              ;;
            "main")
              DEPLOY_ALIAS="production"
              ;;
          esac

          if [ "$DEPLOY_ALIAS" = "production" ]; then
            PROD_FLAG="--prod"
          else
            PROD_FLAG=""
          fi

          netlify deploy \
            --auth ${{ secrets.NETLIFY_AUTH_TOKEN }} \
            --site ${{ secrets.NETLIFY_SITE_ID }} \
            --dir ./dist \
            --alias $DEPLOY_ALIAS \
            $PROD_FLAG

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
